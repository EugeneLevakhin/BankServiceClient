//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BankServiceClient.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BanknoteModel", Namespace="http://schemas.datacontract.org/2004/07/BankService.ServiceDomain")]
    [System.SerializableAttribute()]
    public partial class BanknoteModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DenominationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long QuantityField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Denomination {
            get {
                return this.DenominationField;
            }
            set {
                if ((this.DenominationField.Equals(value) != true)) {
                    this.DenominationField = value;
                    this.RaisePropertyChanged("Denomination");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IBanknotesService")]
    public interface IBanknotesService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBanknotesService/GetAllBanknotes", ReplyAction="http://tempuri.org/IBanknotesService/GetAllBanknotesResponse")]
        BankServiceClient.ServiceReference.BanknoteModel[] GetAllBanknotes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBanknotesService/GetAllBanknotes", ReplyAction="http://tempuri.org/IBanknotesService/GetAllBanknotesResponse")]
        System.Threading.Tasks.Task<BankServiceClient.ServiceReference.BanknoteModel[]> GetAllBanknotesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBanknotesService/AddOrChangeBanknote", ReplyAction="http://tempuri.org/IBanknotesService/AddOrChangeBanknoteResponse")]
        bool AddOrChangeBanknote(int denomination, long quantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBanknotesService/AddOrChangeBanknote", ReplyAction="http://tempuri.org/IBanknotesService/AddOrChangeBanknoteResponse")]
        System.Threading.Tasks.Task<bool> AddOrChangeBanknoteAsync(int denomination, long quantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBanknotesService/GetBanknote", ReplyAction="http://tempuri.org/IBanknotesService/GetBanknoteResponse")]
        BankServiceClient.ServiceReference.BanknoteModel GetBanknote(int denomination);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBanknotesService/GetBanknote", ReplyAction="http://tempuri.org/IBanknotesService/GetBanknoteResponse")]
        System.Threading.Tasks.Task<BankServiceClient.ServiceReference.BanknoteModel> GetBanknoteAsync(int denomination);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBanknotesServiceChannel : BankServiceClient.ServiceReference.IBanknotesService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BanknotesServiceClient : System.ServiceModel.ClientBase<BankServiceClient.ServiceReference.IBanknotesService>, BankServiceClient.ServiceReference.IBanknotesService {
        
        public BanknotesServiceClient() {
        }
        
        public BanknotesServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BanknotesServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BanknotesServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BanknotesServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public BankServiceClient.ServiceReference.BanknoteModel[] GetAllBanknotes() {
            return base.Channel.GetAllBanknotes();
        }
        
        public System.Threading.Tasks.Task<BankServiceClient.ServiceReference.BanknoteModel[]> GetAllBanknotesAsync() {
            return base.Channel.GetAllBanknotesAsync();
        }
        
        public bool AddOrChangeBanknote(int denomination, long quantity) {
            return base.Channel.AddOrChangeBanknote(denomination, quantity);
        }
        
        public System.Threading.Tasks.Task<bool> AddOrChangeBanknoteAsync(int denomination, long quantity) {
            return base.Channel.AddOrChangeBanknoteAsync(denomination, quantity);
        }
        
        public BankServiceClient.ServiceReference.BanknoteModel GetBanknote(int denomination) {
            return base.Channel.GetBanknote(denomination);
        }
        
        public System.Threading.Tasks.Task<BankServiceClient.ServiceReference.BanknoteModel> GetBanknoteAsync(int denomination) {
            return base.Channel.GetBanknoteAsync(denomination);
        }
    }
}
